"use client"

import React from "react"
import { useState, useEffect } from "react"
import { useSpeechSynthesis } from "react-speech-kit"


const LearningModule = () => {
  const [lessons, setLessons] = useState([])
  const [currentLessonIndex, setCurrentLessonIndex] = useState(0)
  const [userPerformance, setUserPerformance] = useState(0)
  const { speak } = useSpeechSynthesis()

  useEffect(() => {
    // Simulating AI-powered content generation
    const generateLessons = async () => {
      // In a real application, this would call an AI model to generate personalized content
      const topics = ["Math", "Science", "Language"]
      const generatedLessons = topics.map((topic, index) => ({
        topic,
        content: `This is a personalized ${topic} lesson for difficulty level ${index + 1}.`,
        difficulty: index + 1,
      }))
      setLessons(generatedLessons)
    }

    generateLessons()
  }, [])

  useEffect(() => {
    // Adjust difficulty based on user performance
    if (userPerformance > 80) {
      setCurrentLessonIndex((prev) => Math.min(prev + 1, lessons.length - 1))
    } else if (userPerformance < 50) {
      setCurrentLessonIndex((prev) => Math.max(prev - 1, 0))
    }
  }, [userPerformance, lessons])

  const handleNextLesson = () => {
    setCurrentLessonIndex((prev) => Math.min(prev + 1, lessons.length - 1))
  }

  const handlePreviousLesson = () => {
    setCurrentLessonIndex((prev) => Math.max(prev - 1, 0))
  }

  const handleSpeak = () => {
    if (lessons[currentLessonIndex]) {
      speak({ text: lessons[currentLessonIndex].content })
    }
  }

  const handleQuizComplete = (score) => {
    setUserPerformance(score)
  }

  if (lessons.length === 0) {
    return <div>Loading lessons...</div>
  }

  const currentLesson = lessons[currentLessonIndex]

  return (
    <div className="bg-white p-6 rounded-lg shadow-lg">
      <h2 className="text-3xl font-bold mb-4 text-blue-600">{currentLesson.topic} Lesson</h2>
      <div className="bg-yellow-100 p-4 rounded-lg mb-4">
        <p className="text-lg">{currentLesson.content}</p>
      </div>
      <div className="flex justify-between items-center mb-4">
        <button
          onClick={handlePreviousLesson}
          className="bg-blue-500 text-white px-4 py-2 rounded-full hover:bg-blue-600 transition-colors duration-300"
          disabled={currentLessonIndex === 0}
        >
          Previous Lesson
        </button>
        <span className="text-xl font-bold">Difficulty: {currentLesson.difficulty}/5</span>
        <button
          onClick={handleNextLesson}
          className="bg-blue-500 text-white px-4 py-2 rounded-full hover:bg-blue-600 transition-colors duration-300"
          disabled={currentLessonIndex === lessons.length - 1}
        >
          Next Lesson
        </button>
      </div>
      <button
        onClick={handleSpeak}
        className="bg-green-500 text-white px-4 py-2 rounded-full hover:bg-green-600 transition-colors duration-300 w-full mb-4"
      >
        Listen to Lesson
      </button>
      <MiniQuiz topic={currentLesson.topic} difficulty={currentLesson.difficulty} onComplete={handleQuizComplete} />
    </div>
  )
}


const MiniQuiz = ({ topic, difficulty, onComplete }) => {
  const [question, setQuestion] = useState("")
  const [options, setOptions] = useState([])
  const [correctAnswer, setCorrectAnswer] = useState(-1)
  const [userAnswer, setUserAnswer] = useState(-1)
  const [showResult, setShowResult] = useState(false)

  useEffect(() => {
    // Generate a question based on the current topic and difficulty
    const generateQuestion = () => {
      // In a real application, this would be generated by an AI model
      setQuestion(`What is an example of ${topic} at difficulty level ${difficulty}?`)
      setOptions(["Option A", "Option B", "Option C", "Option D"])
      setCorrectAnswer(Math.floor(Math.random() * 4))
    }

    generateQuestion()
    setUserAnswer(-1)
    setShowResult(false)
  }, [topic, difficulty])

  const handleAnswer = (index) => {
    setUserAnswer(index)
    setShowResult(true)
    const score = index === correctAnswer ? 100 : 0
    onComplete(score)
  }

  return (
    <div className="bg-blue-100 p-4 rounded-lg">
      <h3 className="text-xl font-bold mb-2">Quick Quiz</h3>
      <p className="mb-4">{question}</p>
      <div className="grid grid-cols-2 gap-2">
        {options.map((option, index) => (
          <button
            key={index}
            onClick={() => handleAnswer(index)}
            className={`p-2 rounded-lg ${
              showResult
                ? index === correctAnswer
                  ? "bg-green-500 text-white"
                  : index === userAnswer
                    ? "bg-red-500 text-white"
                    : "bg-gray-200"
                : "bg-white hover:bg-gray-100"
            }`}
            disabled={showResult}
          >
            {option}
          </button>
        ))}
      </div>
      {showResult && (
        <p className="mt-4 font-bold">{userAnswer === correctAnswer ? "Correct!" : "Incorrect. Try again!"}</p>
      )}
    </div>
  )
}

export default LearningModule

